[PHP]

;;;;;;;;;;;;;;;;;;;;;;;
; 关于 php.ini 配置文件 ;
;;;;;;;;;;;;;;;;;;;;;;;
; PHP 的初始化文件, 必须命名为 php.ini.
; 主要是用来负责PHP的配置.

; PHP 会尝试通过一些地址来寻找和加载配置.
; 比如有以下几种方式依次查找该文件:
; 1. SAPI .
; 2. 环境变量 PHPRC . (As of PHP 5.2.0)
; 3. Windows上预定义好的注册表 (As of PHP 5.2.0)
; 4. 当前工作环境目录 (except CLI)
; 5. 网站 的路径  (for SAPI modules),  PHP 的路径 (otherwise in Windows)
; 6. 编译时，指定的 --with-config-file-path 路径, 
; 或者编译时的路径是Windows安装目录(C:\windows or C:\winnt)

; 这个文件的语法非常简单.
; 空白字符和以';'开始的行被忽略
; 章节标题 (如[Foo]) 也会被忽略 即使未来会有其他用

; 章节标题 [PATH=/www/mysite] 下面的配置, 只适用于在 /www/mysite 路径下的php文件.
; 章节标题 [HOST=www.example.com] 下面的配置只适用于 www.example.com 服务下的文件
; 这些特殊章节目录不会被 用户定义的INI文件或者在运行时 覆盖
; 现在, [PATH=] 和 [HOST=] 章节 只有在 CGI/FastCGI 下运行

; 设置指令的格式如下:
; directive = value
; directive 是大小写敏感的.所以,"foo=bar"不同于"FOO=bar".
; 这些 directive 是被用于配置PHP或者PHP扩展的变量名.没有名称验证 。
; 如果因为 directive 没有设置或者出错,PHP不能找到预设的 directive，那么将使用默认值

; value 可以是一个字符串(string),可以是一个数字(number), 可以是一个PHP常量(如:E_ALL或者M_PI), one
; 可以是INI常量之一(On, Off, True, False, Yes, No 和 None) 或者是一个表达式(如:E_ALL & ~E_NOTICE)
; 或是一个引号引起来的字符串("bar") 或者是对先前已经设定过了的常量或指令的应用(如${foo})

; INI文件中的表达式仅限于按位运算符和括号:
; |  按位或 OR
; ^  按位异或 XOR
; &  按位与 AND
; ~  按位非 NOT
; !  逻辑非 NOT

; 布尔(boolean)标志 
; 正确 可以用 1, On, True 或者 Yes 值来代替.
; 错误 可以用 0, Off, False 或者 No 值来代替.

; 一个空字符串可以在等号后面什么都不写来表示, 或者通过用一个None关键字来表示是个空字符串:

;  foo =         ; 设置foo是一个空字符串
;  foo = None    ; 设置foo是一个空字符串
;  foo = "None"  ; 设置foo设为'None'字符串

; 如果你要使用常量值,而这些常量属于一个动态加载的扩展 ( PHP扩展 或者 Zend扩展),
; 你只能在加载这些扩展之后，再用这些常量.

;;;;;;;;;;;;;;;;;;;
;   关于这个文件    ;
;;;;;;;;;;;;;;;;;;;
; PHP 一般有 两个 INI 文件.
; 一个用于生产环境(production)，一个用于开发环境(development)

; php.ini-production 包含设置保存安全、性能和最佳实践的核心。
; 但是请注意,这些设置可能打破兼容老或少安全意识的应用程序。 
; 我们推荐在生产和测试环境中使用php.ini-production

; php.ini-development 与production变量非常类似, 
; 但是除此之外当它出错时，它有更多的信息.
; 我们建议只有在开发环境中使用development版本的ini，
; 否则用户会在出错时的错误信息中，无意中泄露应用安全信息

; 这是一个 php.ini-development INI 文件

;;;;;;;;;;;;;;;;;;;
;     快速参考 	  ;
;;;;;;;;;;;;;;;;;;;
; 以下是在INIs的生产或开发版本中与PHP的默认行为不同的所有设置。
; 请参阅文档后面的实际设置，了解 我们为什么会推荐PHP中的这些更改 的更多详细信息。

; 是否显示所有错误。
; display_errors
;   Default Value: On
;   Development Value: On
;   Production Value: Off

; 是否显示PHP启动过程中的错误信息。
; display_startup_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: Off

; 显示错误报告级别
; error_reporting
;   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
;   Development Value: E_ALL
;   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT

; 是否在出错信息中使用HTML标记
; html_errors
;   Default Value: On
;   Development Value: On
;   Production value: On

; 是否在日志文件里记录错误
; log_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: On

; 每个脚本解析输入数据(POST, GET, upload)的最大允许时间(秒) -1 表示不限制
; max_input_time
;   Default Value: -1 (Unlimited)
;   Development Value: 60 (60 seconds)
;   Production Value: 60 (60 seconds)

; 输出缓冲区大小(字节) 建议是(4096 ~ 8192)
; output_buffering
;   Default Value: Off
;   Development Value: 4096
;   Production Value: 4096

; 是否声明$argv和$argc全局变量(包含用GET方法的信息)。建议OFF来提高性能
; register_argc_argv
;   Default Value: On
;   Development Value: Off
;   Production Value: Off

; PHP注册GET，POST和COOKIE变量的REQUEST数组的值。GP表示$_REQUEST只包含$_GET和$_POST而不包括$_COOKIE
; request_order
;   Default Value: None
;   Development Value: "GP"
;   Production Value: "GP"

; 设置会话初始化时启动 gc（garbage collection 垃圾回收）进程的概率的除数.
; session.gc_divisor
;   Default Value: 100
;   Development Value: 1000
;   Production Value: 1000

; 允许用户定义将二进制散列数据转换为可读的格式时每个字符存放多少个比特。
; session.hash_bits_per_character
;   Default Value: 4
;   Development Value: 5
;   Production Value: 5

; 设定是否允许 <? 标签.  否则,只有 <?php 和 <script> 标签被认为是PHP脚本.
; short_open_tag
;   Default Value: On
;   Development Value: Off
;   Production Value: Off

; 设定是否在$php_errormsg中存储错误/警告信息
; track_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: Off

; 指定在使用透明 SID 支持时哪些 HTML 标记会被修改以加入会话 ID;
; url_rewriter.tags
;   Default Value: "a=href,area=href,frame=src,form=,fieldset="
;   Development Value: "a=href,area=href,frame=src,input=src,form=fakeentry"
;   Production Value: "a=href,area=href,frame=src,input=src,form=fakeentry"

; 指定PHP记录GET,POST,Cookie,Environment和Built-in这些变量的顺序.按从左到右记录，最新的记录覆盖较旧的
; variables_order
;   Default Value: "EGPCS"
;   Development Value: "GPCS"
;   Production Value: "GPCS"

;;;;;;;;;;;;;;;;;;;;
; 	php.ini 选项    ;
;;;;;;;;;;;;;;;;;;;;
; 用户定义的php.ini文件(.htaccess)的名字 . 默认是  ".user.ini"
;user_ini.filename = ".user.ini"

; 要禁用此功能，请将此选项设置为空值
;user_ini.filename =

; 用户定义的 php.ini 配置文件的TTL(time-to-live:生存时间),单位为秒. 默认是 300 秒(即 5 分钟)
;user_ini.cache_ttl = 300

;;;;;;;;;;;;;;;;;;;;
;   	语言选项     ;
;;;;;;;;;;;;;;;;;;;;

; 使php脚本语言引擎在Apache下生效
engine = On

; 该指令决定是否允许使用 PHP 代码开始标志的缩写形式（<? ?>）。
; 如果要和 XML 结合使用 PHP，可以禁用此选项以便于嵌入使用 <?xml ?>。
; 否则还可以通过 PHP 来输出，例如：<?php echo '<?xml version="1.0"'; ?>。
; 如果禁用了，必须使用 PHP 代码开始标志的完整形式（<?php ?>）
; http://php.net/short-open-tag
short_open_tag = Off

; 除了通常的 <?php ?> 标志之外还允许使用 ASP 风格的标志 <% %>。
; 这也包括了输出变量值的缩写 <%= $value %>。
; http://php.net/asp-tags
asp_tags = Off

; 浮点数中显示有效数字的位数
; http://php.net/precision
precision = 14

; 输出缓冲是一种用于控制,PHP在将数据推送到客户端之前,内部保留多少输出数据(不包括标头和Cookie)的机制。
; 如果您的应用程序的输出超出此设置,PHP将以指定的大小块发送该数据。
; 打开此设置并设置了其最大缓冲区大小,可能会产生一些副作用.具体取决于您的应用程序和Web服务器。
; 您已经通过print或echo发送正文输出后，再发送标题和Cookie。
; 如果您的服务器由于缓冲输出而发送较少的数据包，因此PHP也有性能优势。 
; 在生产服务器上，由于性能原因，4096字节是一个很好的设置。
; 注意：输出缓冲也可以通过输出缓冲控制(Output Buffering Control)功能进行控制。
; 可能的值有:
;   On = 启用和缓冲区是无限制的。(谨慎使用)
;   Off = 关闭
;   Integer = 启用缓冲区并设置其最大字节(以字节为单位)。
; 注意: 从PHP 4.3.5 版开始，该选项在 PHP-CLI 下总是为 Off
; 默认是: Off   开发者版: 4096   生产者版: 4096
; http://php.net/output-buffering
output_buffering = 4096

; 你可以将脚本的所有输出重定向到一个函数。
; 比如，如果将output_handler设置为“mb_output_handler”，则字符编码将被转换为指定的编码。
; 一旦你在这里设置任何输出处理(handler)，程序将自动打开输出缓冲(output_buffering=4096)。
; 注意: 只有内置函数可以使用此指令。对于用户定义的函数，使用 ob_start()
; 注意: 可移植脚本不应该依赖于这个ini指令。而是使用ob_start（）显式设置输出处理程序。
;	   因为使用此ini指令可能会导致问题，除非您很熟悉脚本
; 注意: 你不能同时使用"mb_output_handler"和"ob_iconv_handler"两个输出处理函数
;      还有你也不能同时使用"ob_gzhandler"输出处理函数和"zlib.output_compression"指令。
; 注意: 如果使用zlib.output_handler指令开启zlib输出压缩，该指令必须为空!!!
; http://php.net/output-handler
;output_handler =

; 使用zlib库对输出进行压缩
; 此选项的有效值是 'off', 'on', 或者一个指定的用于压缩的缓存大小(默认是4kb)
; 注意：结果的chunk大小可能由于压缩对象的大小而不同。PHP输出块的大小一般压缩之后每个大小时几百个字节。 
; 	   如果你喜欢更大的块大小以获得更好的性能，那么另外还要启用output_buffering。
; 注意：您需要使用zlib.output_handler而不是标准的output_handler，否则输出将被损坏。
; http://php.net/zlib.output-compression
zlib.output_compression = Off

; 用于透明输出压缩的压缩级别。 指定0（无压缩）至9（最多压缩）之间的值。 
; 默认值-1表示服务器决定要使用哪个级别
; http://php.net/zlib.output-compression-level
;zlib.output_compression_level = -1

; 如果此处激活了zlib.output_compression，则无法指定其他输出处理程序。 
; 此设置与output_handler相同，但顺序不同。
; http://php.net/zlib.output-handler
;zlib.output_handler =

; 是否要求PHP输出层在每个输出块之后自动刷新数据。
; 这相当于在每次调用print()或echo()和每个HTML块之后调用PHP函数flush()。  
; 打开此选项有严重的性能影响，通常仅用于调试目的。
; http://php.net/implicit-flush
; 注意: 在CLI SAPI模式下，这个指令会被硬编码为On
implicit_flush = Off

; 如果unserializer发现一个未定义的类应该被实例化，unserialize()将被调用(使用undefined类的名称作为参数).
; 如果这里没有指定函数，或指定的函数不包含(或实现)那个未定义的类，将会显示警告信息。
; 所以仅在确实需要实现这样的回调函数时才设置该指令
; 若要禁止这个特性，只需置空即可
unserialize_callback_func =

; 将浮点型和双精度型数据序列化存储时的精度(有效位数)。
; 默认值能够确保浮点型数据被解序列化程序解码时不会丢失数据
serialize_precision = 17

; 如果设置open_basedir，会将所有文件操作限制到定义的目录及以下。  
; 此指令如果在每个目录或每个虚拟主机的Web服务器配置文件中使用最有意义。
; http://php.net/open-basedir
;open_basedir =

; 该指令允许您为安全起见禁用某些方法。
; 它接收逗号分隔的函数名称列表。
; disable_functions 不受安全模式的影响。 
; 本指令只能设置在 php.ini 中。例如不能将其设置在 httpd.conf
; http://php.net/disable-functions
disable_functions =

; 本指令可以使你出于安全的理由禁用某些类。用逗号分隔类名。
; disable_classes 不受安全模式的影响。
; 本指令只能设置在 php.ini 中。例如不能将其设置在 httpd.conf。
; http://php.net/disable-classes
disable_classes =

; 语法高亮模式的色彩  
; 可设置为 <font color="??????"> 中任何可接受的代码
; http://php.net/syntax-highlighting
;highlight.string  = #DD0000
;highlight.comment = #FF9900
;highlight.keyword = #007700
;highlight.default = #0000BB
;highlight.html    = #000000

; 默认值为 FALSE 。 如果设置为 TRUE ，在客户端断开连接后，脚本不会被中止。
; 如果启用，即使用户中止请求，该请求也将被允许完成。
; 如果执行长请求，这可能最终会由用户或浏览器超时被中断，这样考虑启用它。 
; http://php.net/ignore-user-abort
;ignore_user_abort = On

; 确定PHP要使用的realpath(规范化的绝对路径名))缓冲区大小。 
; 在PHP打开大量文件的系统上应当增大该值以提高性能。
; http://php.net/realpath-cache-size
;realpath_cache_size = 16k

; realpath缓冲区中信息的有效期(秒) 
; 对文件很少变动的系统，可以增大该值以提高性能。
; http://php.net/realpath-cache-ttl
;realpath_cache_ttl = 120

; 设定是否开启PHP的垃圾回收机制
; http://php.net/zend.enable-gc
zend.enable_gc = On

; 如果启用，脚本可能会写入与扫描仪不兼容的编码(如: CP936, Big5, CP949 和 Shift_JIS 这些编码)
; 要使用此功能，必须启用mbstring扩展。
; 默认: Off
;zend.multibyte = Off

; 允许设置脚本的默认编码。
; 除非脚本顶部出现“declare（encoding = ...）”指令，否则将使用此值。
; 只有zend.multibyte设置了才会有影响。
; 默认: ""
;zend.script_encoding =

;;;;;;;;;;;;;;;;;
; 		杂项		;
;;;;;;;;;;;;;;;;;

; 决定是否暴露 PHP 被安装在服务器上（例如在 Web 服务器的信息头中加上其签名：X-Powered-By: PHP/5.6.30)  
; 这个不是安全威胁, 但它可以确定是否在您的服务器上使用PHP。
; http://php.net/expose-php
expose_php = On

;;;;;;;;;;;;;;;;;;;
;		资源限制	  ;
;;;;;;;;;;;;;;;;;;;

; 每个脚本的最大执行时间，以秒为单位
; http://php.net/max-execution-time
; 注意: 在CLI SAPI模式下，这个指令会被硬编码为O
max_execution_time = 30

; 设置POST、GET以及PUT方式接收数据时间限制。
; 可以在生产环境中设置这个值 来消除意外长时间运行的脚本
; 注意: 这个指令在CLI SAPI环境下会被硬编码为-1
; 默认值是: -1 (不限制) 开发环境: 60 (60 秒) 生产环境: 60 (60 秒)
; http://php.net/max-input-time
max_input_time = 60

; 设置输入变量的嵌套深度 (例如 $_GET，$_POST……)
; http://php.net/max-input-nesting-level
;max_input_nesting_level = 64

; 接受多少输入的变量(限制分别应用于 $_GET、$_POST 和 $_COOKIE 超全局变量)
; 指令的使用减轻了以哈希碰撞来进行拒绝服务攻击的可能性。 
; 如有超过指令指定数量的输入变量，将会导致 E_WARNING 的产生,更多的输入变量将会从请求中截断。
; max_input_vars = 1000

; 一个脚本所能够申请到的最大内存字节数(可以使用K和M作为单位)(128MB)
; 这有助于防止劣质脚本消耗完服务器上的所有内存。
; 要能够使用该指令必须在编译时使用"--enable-memory-limit"配置选项。
; 如果要取消内存限制，则必须将其设为 -1 。
; 设置了该指令后，memory_get_usage()函数将变为可用。
; http://php.net/memory-limit
memory_limit = 128M

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 		错误处理和记录			 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 设置错误报告的级别。
; 这个指令的值是错误级别常量和按位运算符的组合
; 在程序运行时，还可以通过 error_reporting() 函数进行设置。
; 在PHP 4和PHP 5之中，其默认值为 E_ALL & ~E_NOTICE。 
; 该设置表示除了 E_NOTICE 其他都显示的错误级别。在开发过程中很有必要显示它们。
; 注意: 开发环境的配置文件(php.ini-development)设置为E_ALL.
; 		这意味着它可以报告所有在开发和早期测试期间错误信息。
; 注意: 在开发阶段启用 E_NOTICE 会有一些好处。出于调试的目的：通知信息会对代码中可能出现的bug给出警告。
; 		例如，使用未预先分配和定义的值，就会给出警告。它对于查找拼写错误非常有用，并且可以节省调试的时间。
;		通知信息也会警告你使用更好的代码风格。例如，$arr[item] 最好写成 $arr['item'],
; 		因为 PHP 会试图将 "item" 当成一个常量。如果它不是一个常量，PHP才会把它当做数组的字符串索引。
; 注意: 在PHP 5之中，提供了一个新的错误级别 E_STRICT。 
;		因为 E_STRICT 并不包含在 E_ALL 之中，你必须明确启用才能显示这个类别的错误信息。
;		在开发阶段启用 E_STRICT 会有一些好处。严格的信息将帮助你使用最新和最好的建议的方法来编写代码，例如它会警告你使用了将被废弃的函数。
; 错误级别常量:
; E_ALL             - 所有的错误和警告 (包括从PHP 5.4.0开始的E_STRICT)
; E_ERROR           -  致命的运行时错误
; E_RECOVERABLE_ERROR  - 接近致命的运行时错误，若未被捕获则视同E_ERROR
; E_WARNING         - 运行时警告(非致命性错误)
; E_PARSE           - 编译时解析错误
; E_NOTICE          - 运行时提示(这些警告一般是代码里的bug, 但是也有可能是有意的 
;					  (如:使用未初始化的变量，并依赖于它被自动初始化为空字符串))
; E_STRICT          - 编码标准化警告(建议如何修改以向前兼容)允许PHP建议您的代码更改，这将确保您的代码的最佳互操作性和转发兼容性
; E_CORE_ERROR      - 在PHP初始启动期间发生的致命错误
; E_CORE_WARNING    - PHP启动时初始化过程中的警告(非致命性错)
; E_COMPILE_ERROR   - 编译时致命性错误
; E_COMPILE_WARNING - 编译时警告(非致命性错)
; E_USER_ERROR      - 用户自定义的致命错误
; E_USER_WARNING    - 用户自定义的警告(非致命性错误)
; E_USER_NOTICE     - 用户自定义的提醒(经常是bug，也可能是有意的)
; E_DEPRECATED      - 警告关于在将来的PHP版本中不起作用的代码
; E_USER_DEPRECATED - 用户自定义的弃用警告
;
; 常用值:
;   E_ALL (显示所有错误，警告，提示，包括编码标准)
;   E_ALL & ~E_NOTICE  (显示所有错误,除了提示)
;   E_ALL & ~E_NOTICE & ~E_STRICT  (显示所有错误，除了提示和编码标准警告)
;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (只显示警告)
; 默认值是: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
; 开发环境: E_ALL
; 生产环境: E_ALL & ~E_DEPRECATED & ~E_STRICT
; http://php.net/error-reporting
error_reporting = E_ALL

; 这个指令控制了PHP是否输出错误、提示和警告，以及输出到哪里
; 错误输出在开发过程中非常有用，但在生产环境中可能会非常危险。
; 根据正在出发的错误，应用的一些敏感信息可能会被泄露(如数据库的用户名和密码或更糟)
; 一些开发环境，我们强烈建议输出到日志中而不是STDOUT中
; 可能的值:
;   Off = 不显示错误
;   stderr = 显示错误信息到stderr(标准出错文件) (只有 CGI/CLI 两个模式有用!)
;   On or stdout = 显示错误信息到STDOUT(标准输出文件)
; 默认值: On
; 开发环境: On
; 生产环境: Off
; http://php.net/display-errors
display_errors = On

; 是否显示PHP启动时的错误。
; 即使 display_errors 设置为开启, PHP 启动过程中的错误信息也不会被显示。
; 强烈建议除了调试目的以外，将 display_startup_errors 设置为关闭。
; 默认值: Off
; 开发环境: On
; 生产环境: Off
; http://php.net/display-startup-errors
display_startup_errors = On

; 除了显示错误之外，PHP还可以将错误记录到诸如服务器特定的日志,STDERR或由下面找到的error_log指令指定的位置之类的位置。
; 虽然错误不应该显示在产品服务器上，但是它们仍然应该被监控，所以记录到日志是一个很好的方法。
; 默认值: Off
; 开发环境: On
; 生产环境: On
; http://php.net/log-errors
log_errors = On

; 设置错误日志的最大长度.  在 error_log 会添加有关错误源的信息。
; 默认值为1024，如果设置为0表示不限长度。
; 该长度设置对记录的错误，显示的错误，以及 $php_errormsg都会有限制作用。
; http://php.net/log-errors-max-len
log_errors_max_len = 1024

; 不记录重复的信息。
; 重复的错误必须出现在同一个文件中的同一行代码上，除非 ignore_repeated_source 设置为true。
; http://php.net/ignore-repeated-errors
ignore_repeated_errors = Off

; 忽略重复消息时，也忽略消息的来源。当该设置开启时，重复信息将不会记录它是由不同的文件还是不同的源代码行产生的。
; http://php.net/ignore-repeated-source
ignore_repeated_source = Off

; 如果这个参数设置为Off，则内存泄露信息不会显示 (在 stdout 或者日志中)。
; 这只对调试编译有效，而且需要 error_reporting 包含了 E_WARNING 才会起作用 
; http://php.net/report-memleaks
report_memleaks = On

; 此设置默认为开启。
;report_zend_debug = 0

; 如果开启，最后的一个错误将永远存在于变量 $php_errormsg 中. 
; 将此值设置为On可以帮助调试，适用于开发服务器。 
; 但是，应在生产服务器上禁用它。
; 默认值: Off
; 开发环境: On
; 生产环境: Off
; http://php.net/track-errors
track_errors = On

; 关闭正常的错误报告，并将错误的格式设置为XML-RPC错误信息的格式。
; http://php.net/xmlrpc-errors
;xmlrpc_errors = 0

; 用作 XML-RPC faultCode 元素的值。
;xmlrpc_error_number = 0

; 当PHP显示或记录错误时，它可以将错误消息格式化为HTML，以便于阅读。
; 该指令设置错误消息是否格式化为HTML。
; 注意: 这个指令在CLI SAPI模式下会被硬编码为Off
; 默认值: On
; 开发环境: On
; 生产环境: On
; http://php.net/html-errors
html_errors = On

; 如果html_errors设置为On,并且 docref_root 不为空，则PHP会产生可点击的错误消息，直接指向描述错误或功能的页面。
; 您可以从http://php.net/docs下载PHP手册的副本，并将docref_root更改为本地副本的基本URL(由"/"开头的路径)
; 您还必须指定文件扩展名，包括点。
; PHP的默认行为是将这些设置保留为空，在这种情况下不会生成文档链接。
; 注意: 不要在生产环境中使用此功能.
; http://php.net/docref-root
; 比如:
;docref_root = "/phpmanual/"

; 必须以"."开头
; http://php.net/docref-ext
;docref_ext = .html

; 错误信息之前输出的内容 
; PHP的默认操作是 将这个设置置空
; http://php.net/error-prepend-string
; 比如:
;error_prepend_string = "<span style='color: #ff0000'>"

; 错误信息之后输出的内容 
; PHP的默认操作是将这个设置置空 
; http://php.net/error-append-string
; 比如:
;error_append_string = "</span>"

; 将错误记录到指定的文件。
; PHP的默认操作是将这个值置空
; http://php.net/error-log
; 比如:
;error_log = php_errors.log
; 记录错误信息到系统日志中(Windows:事务日志).
;error_log = syslog

;windows.show_crt_warning
; 默认值 : 0
; 开发环境 : 0
; 生产环境 : 0

;;;;;;;;;;;;;;;;;
; 	  数据处理 	;
;;;;;;;;;;;;;;;;;

; PHP所产生的URL中用来分隔 参数(parameter) 的分隔符。可以用"&"或","等等
; PHP 的默认设置是 "&".
; http://php.net/arg-separator.output
; 比如:
;arg_separator.output = "&amp;"

; PHP解析URL中的变量时使用的分隔符列表。
; PHP的默认设置是"&".
; 注意: 这个设置里的每个字符被认为是分隔符!
; http://php.net/arg-separator.input
; 比如:
;arg_separator.input = ";&"

; 指定PHP记录GET,POST,Cookie,Environment和Built-in这些变量的顺序
; G,P,C,E和S 是以下各个全局变量(GET,POST,COOKIE,ENV和SERVER)的缩写 
; 因为ENV的注册数组是不像其他一样有性能损失,常用ENV不推荐在生产服务器上。
; 您仍然可以通过getenv（）访问环境变量。
; 默认值: "EGPCS"
; 开发环境: "GPCS"
; 生产环境: "GPCS";
; http://php.net/variables-order
variables_order = "GPCS"

; PHP注册GET，POST和COOKIE变量的REQUEST数组的值。
; 该指令确定哪个全局数据（G，P＆C）应注册到全局数组REQUEST中。
; 它还会确定数据的注册顺序。注册是由左到右，新的值将覆盖旧值。
; 将此值留空将导致PHP使用variables_order指令中设置的值。
; 这并不意味着它设置全局变量REQUEST数组为空。
; GP表示$_REQUEST只包含$_GET和$_POST而不包括$_COOKIE
; 默认值: None
; 开发环境: "GP"
; 生产环境: "GP"
; http://php.net/request-order
request_order = "GP"
 
; 该指令确定每次运行PHP是否注册$argv和$argc.
; $argv 当脚本被唤起时，将一个  "包含所有参数的数组"  传给PHP脚本.
; $argc 当脚本被唤起时，将一个  "代表参数个数的数值"  传给PHP脚本.
; 当这个指令被启用后，每次执行脚本都会消耗CPU周期来注册这些变量
; 由于性能的原因，应该在生产服务器上禁用这个特性。
; 注意:这个指令在CLI SAPI模式下会被硬编码为开启
; 默认值: On
; 开发环境: Off
; 生产环境: Off
; http://php.net/register-argc-argv
register_argc_argv = Off

; 当开启后, $_ENV,$_REQUEST 和 $_SERVER常量在他们被第一次被用到的时候创建 而不是在脚本启动的时候创建
; 如果这些常量在脚本中没有被用到，打开这个指令可以使得性能提升
; 要想这个指令生效，必须先关闭 register_argc_argv
; http://php.net/auto-globals-jit
auto_globals_jit = On

; PHP是否会读取POST数据。
; 这个选项是默认启用。
; 你很有可能不会在全局情况下想要启用这个选项. 
; 这会导致 $_POST 和 $_FILES 经常是空的; 唯一可以去到POST数据的方法是通过php://输入流 来读取
; 这对于 代理请求 或 以高效的内存来处理POST数据 是很有用的。
; http://php.net/enable-post-data-reading
;enable_post_data_reading = Off

; PHP 允许的 POST数据 的最大字节长度。此设定会影响到文件上传
; 如果POST数据超出限制，那么$_POST和$_FILES将会为空。
; 要上传大文件，该值必须大于upload_max_filesize指令的值。
; 如果启用了内存限制，那么该值应当小于memory_limit指令的值
; 这个值可以通过设置为0 来禁用限制。
; 如果 enable_post_data_reading 指令被禁用，这个指令会被忽略
; http://php.net/post-max-size
post_max_size = 8M

; 在PHP文档之前自动添加文件.
; http://php.net/auto-prepend-file
auto_prepend_file =

; 在PHP文档之后自动添加文件
; http://php.net/auto-append-file
auto_append_file =

; 默认情况下，PHP将使用Content-Type头输出类型。
; 设置为空时即可禁用
;
; PHP的内置默认类型设置为 text/html
; http://php.net/default-mimetype
default_mimetype = "text/html"

; PHP 的 默认字符集 设置为 UTF-8.
; http://php.net/default-charset
default_charset = "UTF-8"

; PHP内部字符编码设置为空。
; 如果为空的话，会使用上述指令 default_charset 作为内部字符编码
; http://php.net/internal-encoding
;internal_encoding =

; PHP 输入字符编码 被设置为空
; 如果为空的话，会使用 default_charset 作为输入字符编码.
; http://php.net/input-encoding
;input_encoding =

; PHP 输出字符编码设置为空.
; 如果为空的话，会使用 default_charset 作为输出字符编码.
; 另请参见output_buffer。
; http://php.net/output-encoding
;output_encoding =

; 始终填充$ HTTP_RAW_POST_DATA变量。否则的话，该变量只有在遇到不能识别的MIME类型的数据时才产生
; PHP的默认行为是禁用此功能，它将在以后的版本中被删除。
; http://php.net/always-populate-raw-post-data
;always_populate_raw_post_data = -1

;;;;;;;;;;;;;;;;;;;;;;;;;
; 		路径和目录 		;
;;;;;;;;;;;;;;;;;;;;;;;;;

; UNIX系统: "/path1:/path2"
;include_path = ".:/php/includes"
;
; Windows系统: "\path1;\path2"
;include_path = ".;c:\php\includes"
;
; PHP 默认的include_path设置是 ".;/path/to/php/pear"
; http://php.net/include-path

; PHP 页面的根目录，只有非空时才生效
; 如果编译PHP时没有指定FORCE_REDIRECT,如果 你是在非IIS服务器上以CGI方式运行， 你必须设置doc_root
; 替代方法是使用下面的cgi.force_redirect配置
; 请参阅有关安全问题的文档。  
; http://php.net/doc-root
doc_root =

; 告诉PHP在使用 /~username 打开脚本时，到哪个目录下去找。
; 仅在非空时生效
; http://php.net/user-dir
user_dir =

; 存放扩展库,扩展模块的目录，也就是PHP用来寻找动态扩展模块的目录
; http://php.net/extension-dir
; extension_dir = "./"
; windows系统上:
; extension_dir = "ext"

; 用于存放临时文件的路径
; 默认为系统默认值 (见 sys_get_temp_dir)
; sys_temp_dir = "/tmp"

; 是否启用 dl()函数。  
; dl()函数 在多线程服务器（如IIS或Zeus）中无法正常工作，会自动禁用。
; dl()函数: 可动态的载入 PHP 所需的外部扩充模块library。
; http://php.net/enable-dl
enable_dl = Off

; cgi.force_redirect 是提供在大多数Web服务器下运行PHP作为CGI的安全性的必要条件
; Left 未定义, PHP 默认情况下会打开此选项.  You can
; 你可以把它关掉，会有一定的风险
; **但是你在IIS服务器下可以安全得关闭它，事实上，你必须得关闭.**
; http://php.net/cgi.force-redirect
;cgi.force_redirect = 1

; 如果 cgi.nph 开启了，将每个请求都让cgi强制发送200状态
; PHP 默认是关闭这个功能的
;cgi.nph = 1

; 如果 cgi.force_redirect 开启了, 以及不是在Apache或Netscape(iPlanet)网络服务器上运行，
; 你可能需要设置一个环境变量名，这样PHP就可以通过查找来知晓是否可以继续执行
; 设置这些变量可能会导致一些安全问题。
; http://php.net/cgi.redirect-status-env
;cgi.redirect_status_env =

; 需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。
; (见：http://php.net/manual/zh/install.unix.nginx.php)
; cgi.fix_pathinfo 为CGI提供真正的 PATH_INFO / PATH_TRANSLATED 支持。
; PHP 以前的做法是将 PATH_TRANSLATED 设置为 SCRIPT_FILENAME ，并且不会显示 PATH_INFO 是什么。 
; 有关PATH_INFO的更多信息，请参阅CGI规范。
; 设置为1将导致 PHP CGI 修复其路径以符合规范;设置为0会导致PHP的行为与之前一样。 
; 默认情况下打开。 您应该修复脚本以使用 SCRIPT_FILENAME 而不是 PATH_TRANSLATED。
; http://php.net/cgi.fix-pathinfo
cgi.fix_pathinfo=0

; 如果开启了, PHP CGI二进制文件可以安全地放置在Web目录之外，人们无法规避.htaccess的安全性。
; http://php.net/cgi.dicard-path
;cgi.discard_path=1

; IIS (基于WINNT的操作系统) 中的 FastCGI 支持模仿客户端安全令牌。
; 这允许IIS 定义 在IIS下运行的 安全上下文. 
; Apache中的mod_fastcgi 不支持此特性
; 如果要在IIS 下运行，设置为 1 ，  默认是 0 ；
; http://php.net/fastcgi.impersonate
;fastcgi.impersonate = 1

; 禁止通过 FastCGI 连接登录。
; 默认开启
;fastcgi.logging = 0

; cgi.rfc2616_headers 配置选项 指定PHP 在发送HTTP 响应代码时 使用的headers类型
; 如果设置为 0 , PHP 发送 "Status:" 报头 Apache和其他Web服务器都支持
; 若该指令设置为1 , PHP 将会使用 RFC2616 标准头.
; 默认为 0 .
; http://php.net/cgi.rfc2616-headers
;cgi.rfc2616_headers = 0

; cgi.check_shebang_line 决定 CGI PHP 是否会检查 运行脚本的顶部以 #!(shebang)开头的行
; 如果脚本支持作为独立脚本 并且通过PHP CGI运行，则可能需要此行
; 如果这个指令开启，CGI模式中的PHP跳过此行并忽略其内容 
; http://php.net/cgi.check-shebang-line
;cgi.check_shebang_line=1

;;;;;;;;;;;;;;;;
; 	文件上传     ;
;;;;;;;;;;;;;;;;

; 是否允许HTTP文件上传。
; http://php.net/file-uploads
file_uploads = On

; HTTP上传文件的临时目录 (如果没有指定，将使用系统默认值).
; http://php.net/upload-tmp-dir
;upload_tmp_dir =

; 上传文件允许的最大字节长度。
; http://php.net/upload-max-filesize
upload_max_filesize = 2M

; 单个请求允许上传的最大文件数
max_file_uploads = 20

;;;;;;;;;;;;;;;;;;
;	 文件打开封装 	 ;
;;;;;;;;;;;;;;;;;;

; 是否允许将URL(如 http:// 或 ftp://)作为文件处理。
; 即 是否允许打开远程文件
; http://php.net/allow-url-fopen
allow_url_fopen = On

; 是否允许 include/require 打开URL(如 http:// 或 ftp://)远程文件
; http://php.net/allow-url-include
allow_url_include = Off

; 定义匿名 ftp 的密码（email 地址）。默认为空
; http://php.net/from
;from="john@doe.com"

; 定义 PHP 发送的 User-Agent。默认为空。
; http://php.net/user-agent
;user_agent="PHP"

; 基于 socket 的流的默认超时时间（秒）。
; http://php.net/default-socket-timeout
default_socket_timeout = 60

; 当设为 On 时，PHP 将检查通过 fgets() 和 file() 取得的数据中的行结束符号是符合 Unix，MS-DOS，还是 Macintosh 的习惯。
; 这使得 PHP 可以和 Macintosh 系统交互操作，
; 默认值是 Off，因为在检测第一行的 EOL 习惯时会有很小的性能损失
; 而且在 Unix 系统下使用回车符号作为项目分隔符的人们会遭遇向下不兼容的行为。
; http://php.net/auto-detect-line-endings
;auto_detect_line_endings = Off

;;;;;;;;;;;;;;;;;;;;;;
; 		动态扩展 		 ;
;;;;;;;;;;;;;;;;;;;;;;

; 如果您希望自动加载扩展名，请使用以下语法：
;   extension=modulename.extension
;
; 如, 在 Windows 系统上:
;   extension=msql.dll
; 在 UNIX 系统下:
;   extension=msql.so
; 或者通过路径
;   extension=/path/to/extension/msql.so
; 如果你只提供扩展名，PHP将在其默认扩展名目录中查找
;
; Windows 扩展
; 请注意，ODBC是内置支持的，因此不需要dll。
; 请注意，许多DLL文件位于 extensions/（PHP 4下） 和 ext/（PHP 5下）
; 扩展文件以及单独的PECL DLL需要下载 (PHP 5).
; 请务必适当地设置extension_dir指令.
;
;extension=php_bz2.dll
;extension=php_curl.dll
;extension=php_fileinfo.dll
;extension=php_gd2.dll
;extension=php_gettext.dll
;extension=php_gmp.dll
;extension=php_intl.dll
;extension=php_imap.dll
;extension=php_interbase.dll
;extension=php_ldap.dll
;extension=php_mbstring.dll
;extension=php_exif.dll      ; Must be after mbstring as it depends on it
;extension=php_mysql.dll
;extension=php_mysqli.dll
;extension=php_oci8_12c.dll  ; Use with Oracle Database 12c Instant Client
;extension=php_openssl.dll
;extension=php_pdo_firebird.dll
;extension=php_pdo_mysql.dll
;extension=php_pdo_oci.dll
;extension=php_pdo_odbc.dll
;extension=php_pdo_pgsql.dll
;extension=php_pdo_sqlite.dll
;extension=php_pgsql.dll
;extension=php_shmop.dll

; PHP分发中提供的MIBS数据必须被下载
; 详见 http://www.php.net/manual/en/snmp.installation.php 
;extension=php_snmp.dll

;extension=php_soap.dll
;extension=php_sockets.dll
;extension=php_sqlite3.dll
;extension=php_sybase_ct.dll
;extension=php_tidy.dll
;extension=php_xmlrpc.dll
;extension=php_xsl.dll

;;;;;;;;;;;;;;;;;;;
;	 模块 设置 	  ;
;;;;;;;;;;;;;;;;;;;

[CLI Serve]
; CLI Web服务器是否在其终端输出中使用ANSI颜色编码。
cli_server.color = On

[Date]
; 定义 日期函数使用到的默认时区
; 在未设定 TZ 环境变量时用于所有日期／时间函数的默认时区。
; 中国大陆应当使用"PRC"
; 应用时区的优先顺序为：
; 1. 用date_default_timezone_set()函数设定的时区(如果设定了的话)
; 2. TZ 环境变量(如果非空的话)
; 3. 该指令的值(如果设定了的话)
; 4. PHP自己推测(如果操作系统支持)
; 5. 如果以上都不成功，则使用 UTC
; http://php.net/date.timezone
;date.timezone =

; 默认纬度。
; http://php.net/date.default-latitude
;date.default_latitude = 31.7667

; 默认经度。
; http://php.net/date.default-longitude
;date.default_longitude = 35.2333

; 默认日出天顶。
; http://php.net/date.sunrise-zenith
;date.sunrise_zenith = 90.583333

; 默认日落天顶。
; http://php.net/date.sunset-zenith
;date.sunset_zenith = 90.583333

[filter]
; 过滤所有$_GET，$_POST，$_COOKIE，$_REQUEST和 $_SERVER 数据。 原始数据可以通过filter_input（）访问。
; 接受您默认使用的过滤器的名称。 
; http://php.net/filter.default
;filter.default = unsafe_raw

; 设置默认过滤器时要应用的默认标志。 
; 由于向后兼容性原因，默认设置为FILTER_FLAG_NO_ENCODE_QUOTES。
; http://php.net/filter.default-flags
;filter.default_flags =

[iconv]
; 不推荐使用此INI条目，请改用全局input_encoding。
; 如果为空，则使用default_charset或input_encoding或iconv.input_encoding。
; 优先级是: default_charset < intput_encoding < iconv.input_encoding
;iconv.input_encoding =

; 不推荐使用此INI条目，请改用全局internal_encoding。
; 如果为空, 则使用 default_charset 或 internal_encoding 或 iconv.internal_encoding.
; 优先级是: default_charset < internal_encoding < iconv.internal_encoding
;iconv.internal_encoding =

; 不推荐使用此INI条目，请改用全局internal_encoding。
; 如果为空,则使用 default_charset 或者 output_encoding 或者 iconv.output_encoding .
; 优先级是: default_charset < output_encoding < iconv.output_encoding
; 如果要使用输出编码转换，必须设置iconv的输出处理程序，否则不能执行输出编码转换。
;iconv.output_encoding =

[intl]
;intl.default_locale =
; 这个指令允许你在intl函数中发生某些错误时产生PHP错误。
; 该值是产生的错误的级别，默认为0时，不会产生任何错误
;intl.error_level = E_WARNING
;intl.use_exceptions = 0

[sqlite3]
;sqlite3.extension_dir =

[Pcre]
;PCRE 库的回溯限制.
; http://php.net/pcre.backtrack-limit
;pcre.backtrack_limit=100000

;PCRE 库的递归限制.
;请注意：如果说这个值设置得很大的话，可能会消耗掉所有的进程可用堆栈，最终导致PHP崩溃(直到达到系统限制的堆栈大小
; http://php.net/pcre.recursion-limit
;pcre.recursion_limit=100000

[Pdo]
; 是否可以连接ODBC. 可以是 "strict", "relaxed" 或 "off" 其中之一。
; 这个值描述了将连接参数与现有池连接进行匹配时连接管理器的严格程度。
; strict 是推荐的默认值，保持为strict，除非你有充足的理由去改变
; 只有当所有连接参数完全匹配时，才会导致缓存连接的使用。当使用类似的连接参数时，放宽将导致缓存连接的使用。
; 这可能会导致高速缓存的使用量增加，可能会导致如虚拟主机之间出现信息连接的风险
; http://php.net/pdo-odbc.connection-pooling
;pdo_odbc.connection_pooling=strict

;pdo_odbc.db2_instance_name

[Pdo_mysql]
; 如果已经使用了 mysqlnd: 表示内部结果集缓存的缓存槽数
; http://php.net/pdo_mysql.cache_size
pdo_mysql.cache_size = 2000

; 本地MySQL连接的默认socket名称。如果为空，则使用内置的MySQL默认值。
; http://php.net/pdo_mysql.default-socket
pdo_mysql.default_socket=

[Phar]
; 此选项禁用使用Phar流或Phar对象的写入支持创建或修改Phar存档。
; http://php.net/phar.readonly
;phar.readonly = On

; 此选项将强制所有打开的Phar存档包含某种签名（目前支持MD5，SHA1，SHA256和SHA512），
; 并将拒绝处理不包含签名的任何Phar归档。
; http://php.net/phar.require-hash
;phar.require_hash = On

;phar.cache_list =

[mail function]
; 邮箱函数
; 只支持 Windows .
; PHP 在 mail() 函数中用来发送邮件的 SMTP 服务器的主机名称或者 IP 地址。
SMTP = localhost

; 仅用于 Windows：SMTP 服务器的端口号，默认为 25
smtp_port = 25

; 仅用于 Windows：用 PHP 发送邮件时的“From:”邮件地址的值。该选项同时设置了 “Return-Path:”头
;sendmail_from = me@example.com

; 仅用于 Unix : sendmail程序的路径，通常是 /usr/sbin/sendmail 或 /usr/lib/sendmail 
; 您也可以提供参数（默认值：“sendmail -t -i”）.
;sendmail_path =

; 强制添加 作为额外参数传递给sendmail二进制文件的指定参数 。
;  这些参数将始终将第5个参数的值替换为mail()。
;mail.force_extra_parameters =

; 添加 X-PHP-Originating-Script: 它将包括文件名后面的uid。
mail.add_x_header = On

; 将记录所有调用mail()的日志文件的路径。 
; 日志包括脚本，行号，地址和标题。
;mail.log =
; 记录邮件日志到系统日志中(Windows上是事务日志).
;mail.log = syslog

[SQL]
; 是否使用SQL安全模式。
; 如果打开，指定默认值的数据库连接函数将会使用这些默认值代替支持的参数。
; http://php.net/sql.safe-mode
sql.safe_mode = Off

[ODBC]
; 要在odbc_connect(）或odbc_pconnect()没有指定的时候 这里ODBC数据库源。
; http://php.net/odbc.default-db
;odbc.default_db    =  Not yet implemented

; 没有指定odbc_connect()或odbc_pconnect()的时候 使用这里指定的用户名。
; http://php.net/odbc.default-user
;odbc.default_user  =  Not yet implemented

; 如果odbc_connect()或odbc_pconnect()中没有指定。则使用这里的密码
; http://php.net/odbc.default-pw
;odbc.default_pw    =  Not yet implemented

; 控制ODBC游标模型。
; 可能的值为 SQL_CURSOR_FORWARD_ONLY ，SQL_CURSOR_KEYSET_DRIVEN ，SQL_CURSOR_DYNAMIC 和 SQL_CURSOR_STATIC(默认值)。
; 默认值: SQL_CURSOR_STATIC .
;odbc.default_cursortype

; 允许或阻止持久链接。
; http://php.net/odbc.allow-persistent
odbc.allow_persistent = On

; 在重新调用前 检查连接是否仍然有效。
; http://php.net/odbc.check-persistent
odbc.check_persistent = On

; 持久链接的最大数量。 -1表示无限制。
; http://php.net/odbc.max-persistent
odbc.max_persistent = -1

; 最大链接数(持久+非持久)。 -1表示无限制。
; http://php.net/odbc.max-links
odbc.max_links = -1

; 处理长数据. 返回变量的字节数。  0 表示中继.
; http://php.net/odbc.defaultlrl
odbc.defaultlrl = 4096

; 处理二进制数据.  0 代表 passthru, 1 返回本身, 2 转换成 char.
; 有关odbc.defaultlrl和odbc.defaultbinmode的说明，请参阅odbc_binmode和odbc_longreadlen上的文档
; http://php.net/odbc.defaultbinmode
odbc.defaultbinmode = 1

;birdstep.max_links = -1

[Interbase]
; 允许或阻止持久链接。
ibase.allow_persistent = 1

; 持久链接的最大数量。 -1表示无限制。
ibase.max_persistent = -1

; 最大链接数（持久+非持久）。 -1表示无限制。
ibase.max_links = -1

; ibase_connect()的默认数据库名称。
;ibase.default_db =

; ibase_connect()的用户名.
;ibase.default_user =

; ibase_connect()的密码.
;ibase.default_password =

; ibase_connect()的字符集.
;ibase.default_charset =

; 默认时间戳格式。
ibase.timestampformat = "%Y-%m-%d %H:%M:%S"

; 默认日期格式。
ibase.dateformat = "%Y-%m-%d"

; 默认时间格式。
ibase.timeformat = "%H:%M:%S"

[MySQL]
; 允许通过 PHP 访问使用本地文件LOAD DATA语句的
; http://php.net/mysql.allow_local_infile
mysql.allow_local_infile = On

; 是否允许 MySQL 的持久连接
; http://php.net/mysql.allow-persistent
mysql.allow_persistent = On

; 如果 mysqlnd 启用: 内部结果集缓存的缓存槽数
; http://php.net/mysql.cache_size
mysql.cache_size = 2000

; 每个进程中最大的持久连接数目  -1 表示无限制.
; http://php.net/mysql.max-persistent
mysql.max_persistent = -1

; 最大链接数( 持久 + 非持久)。 -1 表示无限制。
; http://php.net/mysql.max-links
mysql.max_links = -1

; mysql_connect()的默认端口号。
; 如果没有指定默认端口号，则按顺序从  MYSQL_TCP_PORT 环境变量 ， /etc/services 文件中的 mysql-tcp 项 
; 或者 编译时指定的 MYSQL_PORT 常量中取得。Win32 环境下只会使用 MYSQL_PORT 常量。
; http://php.net/mysql.default-port
mysql.default_port =

; 使用本地连接时，默认的socket名称。 如果为空，则使用内置的MySQL默认值。
; http://php.net/mysql.default-socket
mysql.default_socket =

; mysql_connect()默认连接的数据库服务器地址 (不适用于SQL安全模式).
; http://php.net/mysql.default-host
mysql.default_host =

; mysql_connect()默认连接数据库时使用的用户名 (不适用于 SQL 安全模式).
; http://php.net/mysql.default-user
mysql.default_user =

; mysql_connect()默认连接数据库时使用的密码 (不适用于 SQL 安全模式).
; 请注意，将密码明文存储在此文件，是一个非常不好的措施
; 因为 *任何*使用PHP访问的用户 都可以运行通过echo get_cfg_var（“mysql.default_password”）获取到并可显示该密码
; 当然，任何具有对该文件的读取访问权限的用户也可以显示密码。
; http://php.net/mysql.default-password
mysql.default_password =

; 连接超时的最长时间（以秒为单位）。 -1表示无限制  (在 Linux 中，此参数设定了等候来自服务器的响应的时长。)
; http://php.net/mysql.connect-timeout
mysql.connect_timeout = 60

; 跟踪模式。
; 当开启 trace_mode 时, 将会显示 table/index 扫描的警告，未释放的结果集以及SQL错误
; http://php.net/mysql.trace-mode
mysql.trace_mode = Off

[MySQLi]

; 持久链接的最大数量。 -1表示无限制。
; http://php.net/mysqli.max-persistent
mysqli.max_persistent = -1

; 允许从PHP访问使用LOAD DATA语句的本地文件
; http://php.net/mysqli.allow_local_infile
;mysqli.allow_local_infile = On

; 允许或阻止持久链接。
; http://php.net/mysqli.allow-persistent
mysqli.allow_persistent = On

; 最大链接数。 -1表示无限制。
; http://php.net/mysqli.max-links
mysqli.max_links = -1

; 如果开启了 mysqlnd：表示内部结果集缓存的缓存槽数
; http://php.net/mysqli.cache_size
mysqli.cache_size = 2000

; mysqli_connect()的默认端口号. 
; 如果没有设置,(按照下面的顺序获取)
; 1.mysqli_connect() 将会使用 $MYSQL_TCP_PORT 
; 2. /etc/services 中的 mysql-tcp 条目 
; 3.编译时的值定义了MYSQL_PORT
; Win32将仅查看MYSQL_PORT。
; http://php.net/mysqli.default-port
mysqli.default_port = 3306

; 本地MySQL连接的默认socket名称。 如果为空，则使用内置的MySQL默认值。
; http://php.net/mysqli.default-socket
mysqli.default_socket =

; mysql_connect() 的默认主机(不适用于安全模式)。
; http://php.net/mysqli.default-host
mysqli.default_host =

; mysql_connect() 的默认用户（不适用于安全模式）。
; http://php.net/mysqli.default-user
mysqli.default_user =

; mysql_connect()默认连接数据库时使用的密码 (不适用于 SQL 安全模式).
; 请注意，将密码明文存储在此文件，是一个非常不好的措施
; 因为 *任何*使用PHP访问的用户 都可以运行通过echo get_cfg_var("mysqli.default_pw")获取到并可显示该密码
; 当然，任何具有对该文件的读取访问权限的用户也可以显示密码。
; http://php.net/mysqli.default-pw
mysqli.default_pw =

; 允许或阻止重新连接
mysqli.reconnect = Off

[mysqlnd]
; 启用/禁用通过mysqlnd收集一般统计信息，可用于调整和监视MySQL操作。
; http://php.net/mysqlnd.collect_statistics
mysqlnd.collect_statistics = On

; 启用/禁用mysqlnd的内存使用统计信息的收集，可用于调整和监视MySQL操作。
; http://php.net/mysqlnd.collect_memory_statistics
mysqlnd.collect_memory_statistics = On

; 记录从所有扩展使用mysqlnd到指定的日志文件的通信。
; http://php.net/mysqlnd.debug
;mysqlnd.debug =

; 定义将记录哪些查询。
; http://php.net/mysqlnd.log_mask
;mysqlnd.log_mask = 0

; mysqlnd内存池的默认大小，由结果集使用。
; http://php.net/mysqlnd.mempool_default_size
;mysqlnd.mempool_default_size = 16000

; 当以字节发送MySQL命令时 使用的预分配缓冲区的大小。
; http://php.net/mysqlnd.net_cmd_buffer_size
;mysqlnd.net_cmd_buffer_size = 2048

; 用于读取服务器发送的数据的预分配缓冲区的大小（以字节为单位）。
; http://php.net/mysqlnd.net_read_buffer_size
;mysqlnd.net_read_buffer_size = 32768

; 网络请求的超时秒数。
; http://php.net/mysqlnd.net_read_timeout
;mysqlnd.net_read_timeout = 31536000

; SHA-256认证插件相关。 文件与MySQL服务器的公共RSA密钥。
; http://php.net/mysqlnd.sha256_server_public_key
;mysqlnd.sha256_server_public_key =

[OCI8]

; 连接：使用外部凭据启用特权连接(OCI_SYSOPER, OCI_SYSDBA)（OCI_SYSOPER，OCI_SYSDBA）Connection: Enables privileged connections using external
; credentials 
; http://php.net/oci8.privileged-connect
;oci8.privileged_connect = Off

; 连接：每个进程的OCI8持续连接的最大数量。 使用-1表示无限制。
; http://php.net/oci8.max-persistent
;oci8.max_persistent = -1

; 连接：允许进程 维持 空闲的持久连接 的最大秒数。 使用-1表示 空闲持久连接 将永远保持。
; http://php.net/oci8.persistent-timeout
;oci8.persistent_timeout = -1

; 连接：在oci_pconnect()连接期间，发出ping之前必须通过的秒数，以检查连接的有效性。
; 当设置为0时，每个oci_pconnect()将导致ping。 使用-1完全禁用ping。
; http://php.net/oci8.ping-interval
;oci8.ping_interval = 60

; 连接：此设置用于 Oracle 11g 数据库驻留连接池(DRCP)的所有池 服务器请求的 用户选择的连接类。
; 要使用DRCP，该值应设置为运行相同应用程序的所有Web服务器的相同字符串，必须配置数据库池，并且连接字符串必须指定才能使用池化的服务器。
;oci8.connection_class =

; 高可用性:开启后，当数据库节点发生故障时，允许PHP接受 快速应用通知(FAN)事件
; 数据库也必须配置为发布FAN事件。
;oci8.events = Off

; 调整: 此选项启用语句缓存，并指定要缓存多少语句。
; 0 表示禁用语句缓存
; http://php.net/oci8.statement-cache-size
;oci8.statement_cache_size = 20

; 调整: 启用语句预取，并设置语句执行后将自动获取默认的行数。
; http://php.net/oci8.default-prefetch
;oci8.default_prefetch = 100

; 兼容性. 
; 如果设置成On，表示oci_close()不会关闭 oci_connect() 和 oci_new_connect() 连接.
; http://php.net/oci8.old-oci-close-semantics
;oci8.old_oci_close_semantics = Off

[PostgreSQL]
; 允许或阻止持久链接。
; http://php.net/pgsql.allow-persistent
pgsql.allow_persistent = On

; 始终使用 pg_pconnect() 检测断开的永久链接。
; 自动复位功能需要一些性能开销。
; http://php.net/pgsql.auto-reset-persistent
pgsql.auto_reset_persistent = Off

; 持久链接的最大数量。 -1表示无限制。
; http://php.net/pgsql.max-persistent
pgsql.max_persistent = -1

; 最大链接数(持久 + 非持久)。 -1表示无限制。
; http://php.net/pgsql.max-links
pgsql.max_links = -1

; 忽略PostgreSQL后端通知消息。
; 通知消息记录需要一些开销。
; http://php.net/pgsql.ignore-notice
pgsql.ignore_notice = 0

; 日志是否记录 PostgreSQL 后端警告信息
; 除非 pgsql.ignore_notice=0, 模块一直不会记录警告信息
; http://php.net/pgsql.log-notice
pgsql.log_notice = 0

[Sybase-CT]
; 允许或阻止持久链接。
; http://php.net/sybct.allow-persistent
sybct.allow_persistent = On

; 持久链接的最大数量。 -1表示无限制。
; http://php.net/sybct.max-persistent
sybct.max_persistent = -1

; 最大链接数(持久 + 非持久)。 -1表示无限制。
; http://php.net/sybct.max-links
sybct.max_links = -1

; 服务端消息 最小严重性程度 
; http://php.net/sybct.min-server-severity
sybct.min_server_severity = 10

; 客户端消息。显示的最小的严重性
; http://php.net/sybct.min-client-severity
sybct.min_client_severity = 10

; 设置每个上下文超时时间
; http://php.net/sybct.timeout
;sybct.timeout=

;sybct.packet_size

; 在返回失败消息之前等待连接尝试成功的最长时间（秒）。
; 默认: 1 分钟
;sybct.login_timeout=

; 您要连接的主机的名称，可以由sp_who显示。
; 默认: 空
;sybct.hostname=

; 设置重试死锁的频率，-1 表示永远 
; 默认: 0
;sybct.deadlock_retry_count=

[bcmath]
; 所有bcmath函数的十进制数字数。
; http://php.net/bcmath.scale
bcmath.scale = 0

[browscap]
; http://php.net/browscap
;browscap = extra/browscap.ini

[Session]
; 处理程序用于存储/检索数据。
; http://php.net/session.save-handler
session.save_handler = files

; 参数传递给save_handler。
; 在文件的情况下，这是存储数据文件的路径。
; 注意: Windows用户必须更改此变量才能使用PHP的会话功能。
; 路径可以定义为:

;     session.save_path = "N;/path"
;
; 其中N是整数，决定会话文件分布的目录深度
; 不是将所有会话文件存储在/path中, 而是将会话数据存储在N级深的目录中.  
; 对于你的操作系统，在一个目录中就有许多文件存在问题，这个方法是非常有用的。
; 对于处理许多会话的服务器来说，这是一个更有效的布局
;
; 注 1: PHP 不会自动创建该目录结构。你可以在 ext/session 目录中使用该脚本
; 注 2: 如果你使用子目录进行对话存储，请参阅下面的垃圾回收部分
;
; 文件存储模块默认使用模式600创建文件。
; 你可以通过使用下面方法来改变它
;
;     session.save_path = "N;MODE;/path"
;
; 其中 MODE 是一个八进制. 
; 请注意，这不会覆盖线程的掩码
; http://php.net/session.save-path
;session.save_path = "/tmp"

; 是否使用严格的会话模式。
; 如果浏览器发送未初始化的会话ID，严格会话模式不接受未初始化的会话ID并重新生成会话ID。
; 严格模式通过会话采用漏洞保护应用程序免于会话固定。
; 默认情况下，它被禁用以实现最大的兼容性，但是鼓励尝试使用这个参数。
; https://wiki.php.net/rfc/strict_sessions
session.use_strict_mode = 0

; 是否在客户端用 cookie 来存放会话 ID。默认为 1（启用）
; http://php.net/session.use-cookies
session.use_cookies = 1

; 是否仅通过安全连接发送 cookie。默认为 off
; http://php.net/session.cookie-secure
;session.cookie_secure =

; 是否在客户端仅仅使用 cookie 来存放会话 ID
; 启用此设定可以防止有关通过 URL 传递会话 ID 的拦截攻击
; http://php.net/session.use-only-cookies
session.use_only_cookies = 1

; 指定会话名以用做 cookie 的名字。只能由字母数字组成，默认为 PHPSESSID
; http://php.net/session.name
session.name = PHPSESSID

; 会话模块是否在请求开始时自动启动一个会话。默认为 0（不启动）
; http://php.net/session.auto-start
session.auto_start = 0

; 以秒数指定了发送到浏览器的 cookie 的生命周期。值为 0 表示“直到关闭浏览器”。默认为 0
; http://php.net/session.cookie-lifetime
session.cookie_lifetime = 0

; 设定会话 cookie 的路径。默认为 /
; http://php.net/session.cookie-path
session.cookie_path = /

; 设定会话 cookie 的域名。默认为无，表示根据 cookie 规范产生 cookie 的主机名
; http://php.net/session.cookie-domain
session.cookie_domain =

; 将cookie标记为只能通过HTTP协议访问。 这意味着cookie将无法通过脚本语言（如JavaScript）访问。 此设置可以有效帮助通过XSS攻击减少身份盗用（尽管所有浏览器都不支持此漏洞）。
; http://php.net/session.cookie-httponly
session.cookie_httponly =

; 定义用来序列化／解序列化的处理器名字。默认是php
; http://php.net/session.serialize-handler
session.serialize_handler = php

; 定义 在每次会话初始化时 启动“垃圾回收”过程 的概率。
; 概率可以通过 ( gc_probability / gc_divisor ) 来计算。 
; 默认值: session.gc_probability = 1 和 session.gc_divisor = 100
; 开发环境: session.gc_probability = 1 和 session.gc_divisor = 1000
; 生产环境: session.gc_probability = 1 和 session.gc_divisor = 1000
session.gc_probability = 1
session.gc_divisor = 1000

; 指定过了多少秒之后数据就会被视为“垃圾”并被清除。
; 垃圾搜集可能会在 session 启动的时候开始（ 取决于session.gc_probability 和 session.gc_divisor）
; http://php.net/session.gc-maxlifetime
session.gc_maxlifetime = 1440

; 注: 如果你是使用子目录来存储回话文件(session.save_path)，那么不能自动垃圾回收。
;     你需要通过shell脚本，cron条目或者其他一些方法进行垃圾回收。
;     例如，以下脚本相当于将session.gc_maxlifetime设置为1440 (1440秒= 24分钟) ：
; 				find/path/to/sessions -cmin +24-type f | xargs rm

; 检查每个 HTTP Referer 的子串.
; 如果客户端发送了 Referer 信息但是在其中并未找到该子串，则嵌入的会话 ID 会被标记为无效。
; 默认为空字符串
; http://php.net/session.referer-check
session.referer_check =

; 从上面的文件中读取的字节数。默认为0(禁用)
; http://php.net/session.entropy-length
;session.entropy_length = 32

; 在此指定创建 session ID.
; 默认是 /dev/urandom
; 在没有 /dev/urandom 但没有 /dev/arandom 的系统上，这将默认为 /dev/arandom
; 如果在编译时都没有找到，则默认值不是熵文件。
; 在Windows上，设置entropy_length值将激活Windows随机源（使用CryptoAPI）
;session.entropy_file = /dev/urandom

; 指定会话页面所使用的HTTP缓冲控制方法 
; 可选值：none/nocache/private/private_no_expire/public。默认为 nocache。
; 留空，以避免发送反缓存头.
; http://php.net/session.cache-limiter
session.cache_limiter = nocache

; 文件在 n 分钟后过期。
; 以分钟数指定缓冲的会话页面的存活期
; 此设定对 nocache 缓冲控制方法无效。默认为 180 
; http://php.net/session.cache-expire
session.cache_expire = 180

; 是否启用透明 SID 支持。默认为 0 (禁用)
; 默认情况下禁用反向支持。
; 使用转换可能会危及用户的安全。请谨慎使用此选项。
; - 用户可能会发送包含其他人的via，email，IRC等活跃的sessionID 的 URL
; - 包含活跃的session ID 的URL 可能会被存储在可公开访问的计算机中
; - 用户可以使用相同的session ID访问您的站点，始终使用存储在浏览器的历史记录或书签中的URL。
; http://php.net/session.use-trans-sid
session.use_trans_sid = 0

; 选择用于生成session ID的散列算法。
; 可选值:
;   0  表示 MD5 ( 128 位)
;   1  表示 SHA-1 ( 160 位)
; 此选项也可以设置为散列扩展支持的任何散列函数的名称. 
; hash_algos()函数返回可用散列表。
; http://php.net/session.hash-function
session.hash_function = 0

; 允许用户定义将二进制散列数据转换为可读的格式时每个字符存放多少个比特
; 可选值:
;   4  (0-9, a-f)
;   5  (0-9, a-v)
;   6  (0-9, a-z, A-Z, "-", ",")
; 默认值: 4
; 开发环境: 5
; 生产环境: 5
; http://php.net/session.hash-bits-per-character
session.hash_bits_per_character = 5

; 指定在使用透明 SID 支持时哪些 HTML 标记会被修改以加入会话 ID。
; form/fieldset 是特殊的; 如果您在这里包含这些内容，重写器将添加一个隐藏的<input>字段，其中包含附加到URL的信息。
; 如果要符合XHTML，请删除表单条目。
; 请注意，所有有效条目都需要“=”，即使没有值。
; 默认值: "a=href,area=href,frame=src,form=,fieldset="
; 开发环境: "a=href,area=href,frame=src,input=src,form=fakeentry"
; 生产环境: "a=href,area=href,frame=src,input=src,form=fakeentry"
; http://php.net/url-rewriter.tags
url_rewriter.tags = "a=href,area=href,frame=src,input=src,form=fakeentry"

; 在$_SESSION中启用上传进度跟踪
; 默认值: On
; 开发环境: On
; 生产环境: On
; http://php.net/session.upload-progress.enabled
;session.upload_progress.enabled = On

; 一旦读取了所有POST数据，就会清除进度信息 (即上传完成).
; 默认值: On
; 开发环境: On
; 生产环境: On
; http://php.net/session.upload-progress.cleanup
;session.upload_progress.cleanup = On

; $_SESSION 用于上传进度 的前缀
; 默认值: "upload_progress_"
; 开发环境: "upload_progress_"
; 生产环境: "upload_progress_"
; http://php.net/session.upload-progress.prefix
;session.upload_progress.prefix = "upload_progress_"

; 包含上传进度信息的 $_SESSION 中的索引名称(与前缀连接)
; 默认值: "PHP_SESSION_UPLOAD_PROGRESS"
; 开发环境: "PHP_SESSION_UPLOAD_PROGRESS"
; 生产环境: "PHP_SESSION_UPLOAD_PROGRESS"
; http://php.net/session.upload-progress.name
;session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"

; 上传进度应该如何更新。 给定以百分比（每个文件）或以字节为单位
; 默认值: "1%"
; 开发环境: "1%"
; 生产环境: "1%"
; http://php.net/session.upload-progress.freq
;session.upload_progress.freq =  "1%"

; 更新之间的最小延迟（以秒为单位）
; 默认值: 1
; 开发环境: 1
; 生产环境: 1
; http://php.net/session.upload-progress.min-freq
;session.upload_progress.min_freq = "1"

[MSSQL]
; 允许或阻止持久链接.
mssql.allow_persistent = On

; 持久链接的最大数量。 -1表示无限制.
mssql.max_persistent = -1

; 最大链接数(持久 + 非持久)。 -1表示无限制。
mssql.max_links = -1

; 要显示的错误最小严重程度。
mssql.min_error_severity = 10

; 要显示的提示消息最小严重性。
mssql.min_message_severity = 10

; 兼容性模式与旧版本的PHP 3.0。
mssql.compatibility_mode = Off

; 连接超时
;mssql.connect_timeout = 5

; 查询超时
;mssql.timeout = 60

; 可选范围是 0 - 2147483647.  默认是: 4096.
;mssql.textlimit = 4096

; 可选范围 0 - 2147483647.  默认是: 4096.
;mssql.textsize = 4096

; 限制每个批处理的结果数量.  0 表示每个批处理显示全部计入
;mssql.batchsize = 0

; 指定如何返回datetime和datetim4列
; On => 将 数据 转换为 SQL服务器设置
; Off => 返回值为YYYY-MM-DD hh：mm：ss
;mssql.datetimeconvert = On

; 连接到服务器时使用NT认证
mssql.secure_connection = Off

; 指定最大进程数。 -1 = 库默认
; msdlib 默认是  25
; FreeTDS 默认是 4096
;mssql.max_procs = -1

; 指定客户端字符集。
; 如果为空或者未设置的话，会使用 freetds.conf 配置文件中的客户端字符集
; 这仅在使用FreeTDS编译时才使用
;mssql.charset = "ISO-8859-1"

[Assertion]
; Assert(表达式); 默认开启
; http://php.net/assert.active
;assert.active = On

; 对每个失败的Assert发出一个PHP警告。
; http://php.net/assert.warning
;assert.warning = On

; 默认关闭bail
; http://php.net/assert.bail
;assert.bail = Off

; 如果断言失败，则调用用户函数。
; http://php.net/assert.callback
;assert.callback = 0

; 用当前的error_reporting()来评估表达式.  
; 如果你想要使用eval() error_reporting(0) 设置为开启
; http://php.net/assert.quiet-eval
;assert.quiet_eval = 0

[COM]
; 包含GUIDs, IIDs 或者文件名中带有TypeLibs的文件的路径
; http://php.net/com.typelib-file
;com.typelib_file =

; 允许分布式COM调用
; http://php.net/com.allow-dcom
;com.allow_dcom = true

; 通过com_load()自动注册typlib组件的常量
; http://php.net/com.autoregister-typelib
;com.autoregister_typelib = true

; 寄存器常量是否区分大小写
; http://php.net/com.autoregister-casesensitive
;com.autoregister_casesensitive = false

; 在重复的常规注册上显示警告
; http://php.net/com.autoregister-verbose
;com.autoregister_verbose = true

; 从COM对象传递字符串时使用的默认字符集代码页.
; 默认: 系统ANSI代码页
;com.code_page=

[mbstring]
; 内部字符表示的语言。
; 这会影响 mb_send_mail() 和 mbstrig.detect_order.
; http://php.net/mbstring.language
;mbstring.language = Japanese

; 不推荐使用此INI条目，请改用全局internal_encoding。
; 内部/脚本编码.
; 一些编码无法作为内部编码。(如. SJIS, BIG5, ISO-2022-*)
; 如果为空，则使用default_charset或internal_encoding或iconv.internal_encoding。
; 优先级是: default_charset < internal_encoding < iconv.internal_encoding
;mbstring.internal_encoding =

; 不推荐使用此INI条目，请改用全局 input_encoding。
; http输入编码.
; 需要先设置 mbstring.encoding_traslation = On .
; 如果为空, 则会使用 default_charset 或 input_encoding 或者 mbstring.input .
; 优先级是: default_charset < intput_encoding < mbsting.http_input
; http://php.net/mbstring.http-input
;mbstring.http_input =

; 不推荐使用此INI条目，请改用全局output_encoding.
; http 输出编码.
; 必须先把 mb_output_handler 注册为输出缓冲区
; 如果为空,则会使用 default_charset 或者 output_encoding 或者 mbstring.http_output.
; 优先级是: default_charset < output_encoding < mbstring.http_output
; 要使用输出编码转换，必须设置mbstring的输出处理程序，否则不能执行输出编码转换。
; http://php.net/mbstring.http-output
;mbstring.http_output =

; 根据mbstring.internal_encoding设置启用自动编码转换。 
; 开启后，可以将输入字符转换为内部编码。
; 主页: 不要使用自动编码转换第三方的lib/applications
; http://php.net/mbstring.encoding-translation
;mbstring.encoding_translation = Off

; 自动编码检测顺序.
; "auto" 表示检测顺序将根据mbstring.language进行更改
; http://php.net/mbstring.detect-order
;mbstring.detect_order = auto

; 当字符不能转换时可以使用 substitute_character
; http://php.net/mbstring.substitute-character
;mbstring.substitute_character = none

; 通过mbstring函数重载（替换）单字节函数。
; mail(), ereg()等会被重载为mb_send_mail(), mb_ereg()等
; 可能的值为0,1,2,4或它们的组合(比如说，7代表重载所有)。
; 0: 不重载复写
; 1: 重载复写 mail() 方法
; 2: 重载复写 str*() 方法
; 4: 重载复写 ereg*() 方法
; http://php.net/mbstring.func-overload
;mbstring.func_overload = 0

; 启用严格的编码检测。
; 默认: Off
;mbstring.strict_detection = On

; 该指令指定 mb_output_handler() 输出内容类型 (正则表达式)
; 默认: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\+xml)
;mbstring.http_output_conv_mimetype=

[gd]
; 告诉jpeg解码忽略警告，并尝试创建一个gd图像。
; 默认情况下，警告将显示为通知禁用
; http://php.net/gd.jpeg-ignore-warning
;gd.jpeg_ignore_warning = 0

[exif]
; exif.encode_unicode 定义了 UNICODE 用户注释被处理的字符集。
; 默认为 ISO-8859-15，可用于大多数非亚洲国家。
; 本设置可以为空或者必须为一个 mbstring 所支持的编码。
; 如果为空，则使用当前 mbstring 内部使用的编码。
; http://php.net/exif.encode-unicode
;exif.encode_unicode = ISO-8859-15

; exif.decode_unicode_motorola 定义了 Unicode 编码的用户注释的图像内部字符集，
; 如果图像是摩托罗拉字节顺序（big-endian）的话。
; 本设置不能为空但可以指定一个 mbstring 支持的编码列表。
; 默认为 UCS-2BE
; http://php.net/exif.decode-unicode-motorola
;exif.decode_unicode_motorola = UCS-2BE

; exif.decode_unicode_intel 定义了 Unicode 编码的用户注释的图像内部字符集，
; 如果图像是英特尔字节顺序（little-endian）的话。
; 本设置不能为空但可以指定一个 mbstring 支持的编码列表。
; 默认为 UCS-2LE
; http://php.net/exif.decode-unicode-intel
;exif.decode_unicode_intel    = UCS-2LE

; exif.encode_jis 定义了 JIS 用户注释被处理的字符集。
; 默认为空值，迫使函数使用当前 mbstring 使用的内部编码。
; http://php.net/exif.encode-jis
;exif.encode_jis =

; exif.decode_jis_motorola 定义了 JIS 编码的用户注释的图像内部字符集，
; 如果图像是摩托罗拉字节顺序（big-endian）的话。
; 本设置不能为空但可以指定一个 mbstring 支持的编码列表。
; 默认为 JIS
; http://php.net/exif.decode-jis-motorola
;exif.decode_jis_motorola = JIS

; exif.decode_jis_intel 定义了 JIS 编码的用户注释的图像内部字符集，
; 如果图像是英特尔字节顺序（litle-endian）的话。
; 本设置不能为空但可以指定一个 mbstring 支持的编码列表。
; 默认为 JIS。
; http://php.net/exif.decode-jis-intel
;exif.decode_jis_intel    = JIS

[Tidy]
; 默认的Tidy配置文件所在位置
; http://php.net/tidy.default-config
;tidy.default_config = /usr/local/lib/php/default.tcfg

; 整理修复 自动输出
; 警告:如果您正在生成非html内容(如动态图像)，请勿使用此选项
; http://php.net/tidy.clean-output
tidy.clean_output = Off

[soap]
; 启用或禁用WSDL缓存功能。
; http://php.net/soap.wsdl-cache-enabled
soap.wsdl_cache_enabled=1

; 扩展模块放置缓存文件的目录名
; http://php.net/soap.wsdl-cache-dir
soap.wsdl_cache_dir="/tmp"

; (生存时间)设定多少秒。 而缓存文件将被使用而不是原始文件。
; http://php.net/soap.wsdl-cache-ttl
soap.wsdl_cache_ttl=86400

; 设置缓存限制的大小。(要缓存的WSDL文件的最大数量)
soap.wsdl_cache_limit = 5

[sysvshm]
; 共享内存段的默认大小
;sysvshm.init_mem = 10000

[ldap]
; 设置最大打开链接数, -1为无限。
ldap.max_links = -1

[mcrypt]
; 有关mcrypt设置的更多信息，请参阅http://php.net/mcrypt-module-open

; 加载mcrypt算法的目录
; 默认: 编译成libmcrypt (通常是/usr/local/lib/libmcrypt)
;mcrypt.algorithms_dir=

; 加载mcrypt模式的目录
; 默认: 编译成libmcrypt (通常是在 /usr/local/lib/libmcrypt)
;mcrypt.modes_dir=

[dba]
;dba.default_handler=

[opcache]
; 确定是否启用了Zend OPCache
;opcache.enable=0

; 确定Zend OPCache是否启用了CLI版本的PHP
;opcache.enable_cli=0

; OPCache共享内存存储大小。
;opcache.memory_consumption=64

; 内存字符串的内存量(Mbytes)
;opcache.interned_strings_buffer=4

; OPCache哈希表中的键（脚本）的最大数量。
; 只允许 200 到 100000 的数字
;opcache.max_accelerated_files=2000

;  直到重启前，"wasted"内存的最大百分比.
;opcache.max_wasted_percentage=5

; 当这个指令开启后, OPcache 将当前工作目录添加到脚本密钥中，从而消除了具有相同名称的文件之间发送冲突的可能
; 禁用指令可提高性能，但可能会破坏现有应用程序。
;opcache.use_cwd=1

; 禁用时，您必须手动重新设置OPcache，或重新启动Web服务器，以使更改文件系统生效。
;opcache.validate_timestamps=1

; 检查共享内存存储分配更改的文件时间戳的频率(以秒为单位)
; "1"表示每秒钟验证一次，但每次请求只能验证一次。
; "0"表示总是验证
;opcache.revalidate_freq=2

; 在 include_path 优化中启用或禁用文件搜索
;opcache.revalidate_path=0

; 如果禁用，所有PHPDoc注释将从代码中删除，以减小优化代码的大小。
;opcache.save_comments=1

; 如果禁用了PHPDoc注释，则不会从SHM加载PHPDoc注释 
; 因此"Doc Comments"可能始终保存(save_comments = 1)，但不会由不需要它们的应用程序加载。
;opcache.load_comments=1

; 如果启用，则加速代码使用快速关闭序列
;opcache.fast_shutdown=0

; 允许文件存在覆盖（file_exists等）性能特征。
;opcache.enable_file_override=0

; 一个位掩码，其中每个位启用或禁用适当的OPcache传递 
;opcache.optimization_level=0xffffffff

;opcache.inherited_hack=1
;opcache.dups_fix=0

; OPcache黑名单文件的位置（允许通配符）。
; 每个OPcache黑名单文件都是一个文本文件，其中包含不应加速的文件的名称。
; 文件格式是将每个文件名添加到新行。 
; 文件名可以是完整路径，也可以是文件前缀(即/var/www/x 表示将/var/www目录下所有以“x”开头的的文件列入黑名单)。
; 忽略以;开始的某一行（注释）。Line starting with a ; are ignored (comments).
;opcache.blacklist_filename=

; 允许排除大文件被缓存。 默认情况下，所有文件都被缓存。
;opcache.max_file_size=0

; 检查每个N请求的缓存校验和。
; 默认值“0”表示检查被禁用。
;opcache.consistency_checks=0

; 如果缓存未被访问，则需要等待多长时间(以秒为单位)重新启动。
;opcache.force_restart_timeout=180

; OPcache error_log文件名。 空字符串表示假定为“stderr”。
;opcache.error_log=

; 所有OPcache错误都会转到Web服务器日志。
; 默认情况下, 只有致命错误(level 0) 或者 错误(level 1) 会被记录.
; 你也可以启用警告(level 2), 信息消息(level 3) 或者调试消息(level 4).
;opcache.log_verbosity_level=1

; 首选共享内存后端。设置为空可以让系统决定。
;opcache.preferred_memory_model=

; 在脚本执行期间保护共享内存免于意外写入。 仅适用于内部调试。
;opcache.protect_memory=0

; 验证缓存的文件权限。
; opcache.validate_permission=0

; 防止chroot环境中的名称冲突。
; opcache.validate_root=0

[curl]
; CURLOPT_CAINFO选项的默认值。 这是必须的绝对路径。
;curl.cainfo =

[openssl]
; 在验证SSL/TLS时 系统上 证书颁发机构(CA)本地文件的位置。 
; 大多数情况不应该为此指令指定一个值，因为PHP将在缺少的情况下尝试使用由操作系统管理存储的证书。
; 如果指定了此值，仍可以通过SSL流的上下文的"cafile"覆盖此值。
;openssl.cafile=

; 如果未指定openssl.cafile或未找到CA文件，则会搜索openssl.capath指向的目录以获取合适的证书。
; 此值必须是正确的证书目录。
; 大多数用户不应该为此指令指定一个值，因为PHP将在缺少的情况下尝试使用由操作系统管理的证书存储。
; 如果指定了此值，则仍可以通过"capath" SSL流上下文选项在每个流的基础上覆盖此值。
;openssl.capath=

; 局部变量:
; tab-width: 4
; End:
